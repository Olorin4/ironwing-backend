name: CI/CD Pipeline

on:
    push:
        branches:
            - master # Trigger deployment only when pushing to the master branch

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            # Step 1: Check out the code
            - name: Checkout code
              uses: actions/checkout@v2

            # Step 2: Set up Node.js
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: "14"

            # Step 3: Install dependencies
            - name: Install dependencies
              run: npm install

            # Step 4: Run tests
            - name: Run tests
              run: npm test

            # Step 5: Generate .env file from GitHub Secrets
            - name: Generate .env file
              run: |
                  echo "PORT=${{ secrets.PORT }}" > .env
                  echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
                  echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
                  echo "DB_USER=${{ secrets.DB_USER }}" >> .env
                  echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
                  echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
                  echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
                  echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
                  echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
                  echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env
                  echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env

            # Step 6: Transfer project files and .env to the server
            - name: Deploy to Server
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_HETZNER_SERVER_KEY }}
                  SERVER_IP: ${{ secrets.SERVER_IP }}
              run: |
                  # Write SSH private key to a temporary file
                  echo "$SSH_PRIVATE_KEY" > private_key.pem
                  chmod 600 private_key.pem

                  # Debugging: Print the server IP to verify it is correctly set (GitHub masks secrets)
                  echo "Deploying to server at $SERVER_IP"

                  # Transfer project files & .env file to the server
                  scp -i private_key.pem -o StrictHostKeyChecking=no -r ./ root@$SERVER_IP:/var/www/ironwing-backend

                  # SSH into the server to install dependencies and restart the app
                  ssh -i private_key.pem -o StrictHostKeyChecking=no root@$SERVER_IP << 'EOF'
                    cd /var/www/ironwing-backend

                  # Ensure the .env file is properly transferred
                  echo "Checking .env file:"
                  cat .env

                  # Install dependencies
                  npm install

                  # Restart PM2 with new process name (ironwing-backend)
                  if pm2 list | grep -q "ironwing-backend"; then
                    echo "Restarting existing PM2 process..."
                    pm2 restart ironwing-backend
                  else
                    echo "Starting new PM2 process..."
                    pm2 start server.js --name "ironwing-backend"
                  fi

                  # Save PM2 process list to ensure it restarts after reboot
                  pm2 save
                EOF
