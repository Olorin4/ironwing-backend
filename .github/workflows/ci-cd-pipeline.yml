name: CI/CD Pipeline

on:
    push:
        branches:
            - master # Runs when pushing to the master branch

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            # Step 1: Check out the code
            - name: Checkout code
              uses: actions/checkout@v2

            # Step 2: Set up Node.js
            - name: Read Node.js version from .nvmrc
              run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_ENV
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: ${{ env.NODE_VERSION }}

            # Step 3: Install dependencies
            - name: Install dependencies
              run: npm install

            # Step 4: Run tests (skips failure if no tests exist)
            - name: Run tests
              run: npm test --passWithNoTests

            # Step 5: Generate .env file from GitHub Secrets
            - name: Generate .env file
              run: |
                  echo "PORT=${{ secrets.PORT }}" > .env
                  echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
                  echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
                  echo "DB_USER=${{ secrets.DB_USER }}" >> .env
                  echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
                  echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
                  echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
                  echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
                  echo "EMAIL_PASS=${{ secrets.EMAIL_PASS }}" >> .env
                  echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env
                  echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env

            # Step 6: Prepare for deployment
            - name: Debug File System Before Packaging
              run: |
                  echo "ðŸš€ Checking files before packaging..."
                  ls -lah
                  du -sh * | sort -hr  # Show largest files
                  echo "ðŸš€ Checking open files..."
                  lsof +D . || echo "No open files found"

            - name: Create deployment package
              run: |
                  echo "ðŸš€ Creating deployment package..."
                  tar --exclude=node_modules --exclude=.git --exclude=*.log --exclude=*.cache -czf deployment.tar.gz .
                  ls -lh deployment.tar.gz  # Debugging step

            # Step 7: Deploy to Server
            - name: Deploy to Server
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_HETZNER_SERVER_KEY }}
                  SERVER_IP: ${{ secrets.SERVER_IP }}
              run: |
                  echo "$SSH_PRIVATE_KEY" > private_key.pem
                  chmod 600 private_key.pem

                  echo "ðŸš€ Verifying deployment package before SCP..."
                  ls -lh deployment.tar.gz  # Debugging step

                  echo "ðŸš€ Transferring package to the server..."
                  scp -i private_key.pem -o StrictHostKeyChecking=no deployment.tar.gz root@$SERVER_IP:/var/www/ironwing-backend

                  echo "âœ… Transfer complete. Extracting on the server..."
                  ssh -i private_key.pem -o StrictHostKeyChecking=no root@$SERVER_IP << 'EOF'
                    cd /var/www/ironwing-backend
                    tar -xzf deployment.tar.gz
                    rm deployment.tar.gz
                    echo "âœ… Extraction complete."

                    echo "ðŸš€ Installing dependencies..."
                    npm install --omit=dev
                    echo "âœ… Dependencies installed."

                    echo "ðŸš€ Restarting PM2..."
                    if pm2 list | grep -q "ironwing-backend"; then
                      pm2 restart ironwing-backend
                    else
                      pm2 start server.js --name ironwing-backend
                    fi
                    pm2 save
                  EOF
